name: Deploy Backend to Amazon ECS

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment to deploy to: (production | staging)'
        default: 'staging'
        required: true

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ github.event.inputs.env == 'production' && secrets.PROD_BE_ECR_REPOSITORY || secrets.STAGING_BE_ECR_REPOSITORY }}
  ECS_SERVICE: ${{ github.event.inputs.env == 'production' && secrets.PROD_BE_ECS_SERVICE || secrets.STAGING_BE_ECS_SERVICE }}
  ECS_CLUSTER: ${{ github.event.inputs.env == 'production' && secrets.PROD_ECS_CLUSTER || secrets.STAGING_ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ github.event.inputs.env == 'production' && secrets.PROD_BE_ECS_TASK_DEFINITION || secrets.STAGING_BE_ECS_TASK_DEFINITION }}
  CONTAINER_NAME: ${{ github.event.inputs.env == 'production' && secrets.PROD_BE_CONTAINER_NAME || secrets.STAGING_BE_CONTAINER_NAME }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Print ENV input
      run: |
        echo "Deploying to AWS ${{github.event.inputs.env}}"

    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd server
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true